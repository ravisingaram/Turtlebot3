#! /usr/bin/env python3

import rospy, json, rospkg
import yaml, threading
from geometry_msgs.msg import PoseWithCovarianceStamped
from geometry_msgs.msg import Pose
import tty,termios,sys 

output_file_path = rospkg.RosPack().get_path('follow_waypoints')+"/saved_path/poses.json"
   
class SavePoses(object):
    def __init__(self):
        
        rospy.loginfo('Starting SavePoses')
        self._pose = Pose()
        self.poses_dict = {}
        self._pose_sub = rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self.sub_callback, queue_size=1)
        self.input_thread = threading.Thread(target=self.save_waypoints) 
        self.input_thread.start()
        #self.write_to_file()

    def sub_callback(self, msg):
        self._pose = msg.pose.pose
            
    def save_waypoints(self):

      while not rospy.is_shutdown():
          rospy.loginfo('saving waypoints')
          c = self.get_char()
          if c=='i':
            self._waypoint_name = input("What is the waypoint name?") 
            self.poses_dict[self._waypoint_name] = self.msg2json(self._pose)
            rospy.loginfo(self.msg2json(self._pose))
            self.write_to_file()

    def get_char(self):
      #Returns a single character from standard input
      fd = sys.stdin.fileno()
      old_settings = termios.tcgetattr(fd)
      try:
         tty.setcbreak(sys.stdin.fileno())
         ch = sys.stdin.read(1)
      finally:
         termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
      return ch
      
    def msg2json(self,msg):
      ''' Convert a ROS message to JSON format'''
      y = yaml.safe_load(str(msg))
      return json.dumps(y,indent=4)

    def write_to_file(self):
        #self.poses_dict[self._waypoint_name] = self._pose
        rospy.loginfo("Written pose")
        rospy.loginfo(self.poses_dict)
        
        json_object = json.dumps(self.poses_dict, indent=4)
          
        #out_file = open("homeposes.json", "w")
        #json.dump(self.poses_dict, out_file, indent = 4)  
        with open(output_file_path, 'w') as outfile:
                
                outfile.write(json_object)
                #json.dump(self.poses_dict,outfile)
        
        #out_file.close()
                    
        rospy.loginfo("Written all Poses to poses.json file")

if __name__ == "__main__":
    rospy.init_node('spot_recorder', log_level=rospy.INFO)
    save_spots_object = SavePoses()
    rospy.spin() # mantain the service open.
